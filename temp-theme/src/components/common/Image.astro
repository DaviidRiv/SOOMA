---
import type { HTMLAttributes } from 'astro/types';
import { findImage } from '~/utils/images';
import {
  getImagesOptimized,
  astroAssetsOptimizer,
  unpicOptimizer,
  isUnpicCompatible,
  type ImageProps,
} from '~/utils/images-optimization';

type Props = ImageProps;
type ImageType = {
  src: string;
  attributes: HTMLAttributes<'img'>;
};

const props = Astro.props;

// Validaciones/base
if (props.alt === undefined || props.alt === null) {
  throw new Error();
}
if (typeof props.width === 'string') props.width = parseInt(props.width);
if (typeof props.height === 'string') props.height = parseInt(props.height);
if (!props.loading) props.loading = 'lazy';
if (!props.decoding) props.decoding = 'async';

// Resolver origen (local o remoto)
const resolved = await findImage(props.src);

// Extraer URL “raw” utilizable
let rawUrl: string | undefined =
  typeof resolved === 'string'
    ? resolved
    : (resolved as any)?.src ?? (typeof props.src === 'string' ? props.src : undefined);

// Detectar GIF (en src original o resuelto)
const srcStr = typeof props.src === 'string' ? props.src : String(rawUrl ?? '');
const isGif =
  /\.gif(?:[?#].*)?$/i.test(srcStr) ||
  (typeof rawUrl === 'string' && /\.gif(?:[?#].*)?$/i.test(rawUrl));

let image: ImageType | undefined = undefined;
let optimizeError: any = null;

if (!isGif) {
  try {
    if (typeof rawUrl === 'string' && (rawUrl.startsWith('http://') || rawUrl.startsWith('https://')) && isUnpicCompatible(rawUrl)) {
      image = await getImagesOptimized(rawUrl, props, unpicOptimizer);
    } else if (resolved) {
      image = await getImagesOptimized(resolved, props, astroAssetsOptimizer);
    }
  } catch (e) {
    optimizeError = e;
  }
}
---

{/*
  Política:
  - Si es GIF => <img> directo (mantiene animación, evita límites de pixel).
  - Si el optimizador falló (p.ej. "Input image exceeds pixel limit") => <img> directo.
  - Si no hay imagen resuelta => no renderiza nada.
*/}
{
  isGif || optimizeError
    ? (rawUrl
        ? (
          <img
            src={rawUrl}
            alt={props.alt}
            loading={props.loading}
            decoding={props.decoding}
            width={props.width}
            height={props.height}
            class={props.class}
            crossorigin="anonymous"
            referrerpolicy="no-referrer"
          />
        )
        : <Fragment />)
    : (!image
        ? <Fragment />
        : <img
            src={image.src}
            crossorigin="anonymous"
            referrerpolicy="no-referrer"
            {...image.attributes}
          />
      )
}
